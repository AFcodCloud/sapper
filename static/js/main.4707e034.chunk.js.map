{"version":3,"sources":["functions/helpers.js","functions/createMatrix.js","functions/metrics.js","components/MineCounter.jsx","components/Timer.jsx","components/Button.jsx","components/Settings.jsx","components/Field.jsx","functions/updateMatrix.js","store/mainReducer.js","functions/handlers.js","components/FieldContainer.jsx","store/store.js","App.js","serviceWorker.js","index.js"],"names":["getCell","matrix","y","x","getAroundCells","cells","dy","dx","cell","push","forEach","handler","length","openingClearCells","freeCells","numCells","flag","cycleCounter","a","aroundcells","c","isFlag","isMine","show","mineCounter","some","id","map","getCellById","i","j","Number","createMatrix","axisY","axisX","idCounter","row","envBackLight","marked","getRandomFreeCells","Math","floor","random","updateTimerArr","arr","MineCounter","mines","flags","flagsCount","flagsParseToArray","toString","split","FlagsCounter","className","key","Timer","counterArr","setTick","isPlay","useState","intervalId","setIntervalID","useEffect","test","setInterval","clearInterval","timerArr","Button","buttonStatus","setRestart","onClick","Settings","setLevel","size","Field","classes","splitHandlers","keyCounter","table","onMouseDown","e","onMouseUp","onMouseLeave","onContextMenu","preventDefault","leftHandler","setRandomMine","rightHandler","leaveHandler","bothDown","filter","bothUp","envCells","pressLeft","setButtonClass","flatMatrix","every","initialState","eventInfo","nativeEvent","which","pressButtons","left","right","downId","FieldContainer","props","event","type","obj","mouseDownHandler","setKeyPressInCell","both","leftMouse","rightMouse","mouseUpHandler","this","setNewMatrix","React","Component","connect","state","main","require","store","createStore","combineReducers","action","window","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4707e034.chunk.js","sourcesContent":["export const getCell = (matrix, y, x) => {\r\n  //находит клетку в матрице\r\n  if (!matrix[y] || !matrix[y][x]) {\r\n    return false\r\n  }\r\n  return matrix[y][x]\r\n}\r\n\r\nexport const getAroundCells = (matrix, y, x) => {\r\n  //находит все клетки что окружают исходную клетку\r\n  let cells = []\r\n  for (let dy = -1; dy <= 1; dy++) {\r\n    for (let dx = -1; dx <= 1; dx++) {\r\n      if (dx === 0 && dy === 0) {\r\n        continue\r\n      }\r\n      const cell = getCell(matrix, y + dy, x + dx)\r\n      if (cell) {\r\n        cells.push(cell)\r\n      }\r\n    }\r\n  }\r\n  return cells\r\n}\r\n\r\nexport const forEach = (matrix, handler) => {\r\n  // функция для перебора матрицы и применения к каждому элементу функции из параметра\r\n  for (let y = 0; y < matrix.length; y++) {\r\n    for (let x = 0; x < matrix[y].length; x++) {\r\n      handler(matrix[y][x])\r\n    }\r\n  }\r\n}\r\n\r\n/* ========================================= */\r\n\r\nexport const openingClearCells = (matrix, cell) => {\r\n  //открыть все свободные клетки\r\n  let freeCells = [cell] //массив для свободных клеток\r\n  let numCells = [] //массив для сбора клеток содержащих число (отдельно чтобы в цикле не искать их окружение)\r\n  let flag = true //условие для цикла\r\n  let cycleCounter = 0 //исходная точка для начала верхнего цикла\r\n\r\n  while (flag) {\r\n    flag = false\r\n    let cells = [] //массив для сбора свободных клеток в цикле\r\n    for (let a = cycleCounter; a < freeCells.length; a++) {\r\n      //итерации по массиву со свободными клетками\r\n      let aroundcells = getAroundCells(matrix, freeCells[a].y, freeCells[a].x)\r\n      for (let c of aroundcells) {\r\n        if (\r\n          !c.isFlag &&\r\n          !c.isMine &&\r\n          !c.show &&\r\n          !c.mineCounter  &&\r\n          !freeCells.some(x => x.id === c.id) &&\r\n          !cells.some(x => x.id === c.id) \r\n        ) {\r\n          cells.push(c)\r\n        } else if (c.mineCounter && !numCells.some(x => x.id === c.id)) {\r\n          numCells.push(c)\r\n        }\r\n      }\r\n    }\r\n    cycleCounter++\r\n    if (cells.length) {\r\n      freeCells = [...freeCells, ...cells]\r\n      flag = true\r\n    } else {\r\n      flag = false\r\n    }\r\n  } //end while\r\n  freeCells = [...freeCells, ...numCells]\r\n  freeCells.map((x) => (x.show = true))\r\n  return matrix\r\n}\r\n\r\nexport const getCellById = (matrix, cell) => {\r\n  for (let i = 0; i < matrix.length; i++) {\r\n    for (let j = 0; j < matrix[i].length; j++) {\r\n      if (matrix[i][j].id === Number(cell)) {\r\n        return matrix[i][j]\r\n      }\r\n    }\r\n  }\r\n  return false\r\n}\r\n","import {getAroundCells} from './helpers'\r\n\r\nexport let createMatrix = (axisY, axisX) => { //генерирование матрицы\r\n    let matrix = [];\r\n    let idCounter = 1;\r\n    for (let y = 0; y < axisY; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < axisX; x++) {\r\n        row.push({\r\n          id: idCounter++,\r\n          show: false,\r\n          isMine: false,\r\n          isFlag: false,\r\n          envBackLight:false,\r\n          mineCounter: 0,\r\n          marked:false,\r\n          x,\r\n          y,\r\n        });\r\n      }\r\n      matrix.push(row);\r\n    }\r\n    /* setRandomMine(matrix,10) */\r\n    return matrix;\r\n  };\r\n\r\n\r\n  export let getRandomFreeCells = (matrix, id) => {\r\n      //возвращает случайнуб свободную клетку (для установки мины setRandomMine)\r\n    const freeCells = [];\r\n    for (let y = 0; y < matrix.length; y++) {\r\n      for (let x = 0; x < matrix[y].length; x++) {\r\n        const cell = matrix[y][x];\r\n        if (!cell.isMine && cell.id!==id) {\r\n          freeCells.push(cell);\r\n        }\r\n      }\r\n    }\r\n    const index = Math.floor(Math.random() * freeCells.length);\r\n    return freeCells[index];\r\n  };\r\n  \r\n  export let setRandomMine = (matrix, mines, id) => {//размещение мин\r\n    for (let i = 1; i <= mines; i++) {\r\n      const cell = getRandomFreeCells(matrix, id);\r\n      cell.isMine = true;\r\n      let aroundcells = getAroundCells(matrix, cell.y, cell.x);\r\n      for (const cell of aroundcells) {\r\n        cell.mineCounter += 1;\r\n      }\r\n    }\r\n  };\r\n\r\n","export let FlagsCounter = (matrix, mines) => {\r\n  let flags = 0\r\n  for (let y = 0; y < matrix.length; y++) {\r\n    for (let x = 0; x < matrix[y].length; x++) {\r\n      if(matrix[y][x].isFlag)flags+=1\r\n    }\r\n  }\r\n  let flagsCount = mines - flags\r\n  let flagsParseToArray = []\r\n  flagsCount = flagsCount.toString().split('')\r\n  if (flagsCount.length === 1) {\r\n    flagsParseToArray = ['0', '0', ...flagsCount]\r\n  } else if (flagsCount.length === 2) {\r\n    flagsParseToArray = ['0', ...flagsCount]\r\n  } else if (flagsCount.length === 3) {\r\n    flagsParseToArray = [...flagsCount]\r\n  }\r\n  for (let x = 0; x < flagsParseToArray.length; x++) {\r\n    if (flagsParseToArray[x] === '-') {\r\n      flagsParseToArray[x] = 'minus'\r\n    }\r\n  }\r\n\r\n  return flagsParseToArray\r\n}\r\n\r\nexport let updateTimerArr = (arr) => {\r\n  if (arr[0] === 9 && arr[1] === 9 && arr[2] === 9) {\r\n    return arr\r\n  }\r\n  for (let i = arr.length - 1; i >= 0; i--) {\r\n    if (arr[i] < 9) {\r\n      arr[i] += 1\r\n      return arr\r\n    } else if (arr[i] === 9) {\r\n      arr[i] = 0\r\n      continue\r\n    }\r\n  }\r\n}\r\n\r\n","import React from 'react'\r\nimport { FlagsCounter } from \"../functions/metrics\"\r\n\r\nexport let MineCounter = ({matrix, mines})=>{\r\n  let mineCounter = FlagsCounter(matrix, mines)\r\n  return(\r\n    <div className=\"flagCount\">\r\n                    {mineCounter.map((x,i)=>{return( <div key={i} className={\"num-\"+ x}></div>)})}\r\n                    </div>\r\n  )\r\n}","import { useEffect, useState } from 'react'\r\nimport React from 'react'\r\n\r\nexport let Timer = ({ counterArr, setTick, isPlay }) => {\r\n  let [intervalId, setIntervalID] = useState()\r\n  useEffect(() => {\r\n    if (isPlay) {\r\n      let test = setInterval(() => {\r\n        setTick()\r\n      }, 1000)\r\n      setIntervalID(test)\r\n    } else {\r\n      clearInterval(intervalId)\r\n    }\r\n  }, [isPlay])\r\n\r\n  let timerArr = counterArr.map((x, key) => {\r\n    return <div className={`num-${x}`} key={key}></div>\r\n  })\r\n  return <div className=\"timer\">{timerArr}</div>\r\n}\r\n","import React from 'react'\r\n\r\nexport let Button = ({buttonStatus, setRestart})=>{\r\n  return (\r\n    <button className={`smileBtn ${buttonStatus}`} onClick={setRestart}></button>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport const Settings = ({setLevel})=>{\r\n  return (\r\n    <div className=\"menu\">  \r\n      <ul className=\"menuList\">\r\n        <li onClick={()=>{setLevel({size:9, mines:10})}}>новичок</li>\r\n        <li onClick={()=>{setLevel({size:16, mines:40})}}>любитель</li>\r\n        <li onClick={()=>{setLevel({size:30, mines:99})}}>профессионал</li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { MineCounter } from './MineCounter'\r\nimport { Timer } from './Timer'\r\nimport { Button } from './Button'\r\nimport { Settings } from './Settings'\r\n\r\nexport const Field = ({\r\n  matrix,\r\n  counterArr,\r\n  classes,\r\n  splitHandlers,\r\n  setTick,\r\n  buttonStatus,\r\n  setRestart,\r\n  isPlay,\r\n  setLevel,\r\n  mines,\r\n}) => {\r\n  let keyCounter = 1\r\n  let table = matrix.map((y) => {\r\n    return (\r\n      <tr key={'key' + keyCounter++}>\r\n        {y.map((x) => {\r\n          return (\r\n            <td\r\n              key={x.id}\r\n              id={x.id}\r\n              className={classes(x)}\r\n              onMouseDown={(e) => splitHandlers(e, x.id)}\r\n              onMouseUp={(e) => splitHandlers(e, x.id)}\r\n              onMouseLeave={splitHandlers}\r\n              onContextMenu={(e) => e.preventDefault()}\r\n            ></td>\r\n          )\r\n        })}\r\n      </tr>\r\n    )\r\n  })\r\n  return (\r\n    <>\r\n      <Settings setLevel={setLevel} />\r\n      <table>\r\n        <caption className=\"header\">\r\n          <div className=\"block\">\r\n            <MineCounter matrix={matrix} mines={mines} />\r\n            <Button buttonStatus={buttonStatus} setRestart={setRestart} />\r\n            <Timer counterArr={counterArr} setTick={setTick} isPlay={isPlay} />\r\n          </div>\r\n        </caption>\r\n        <tbody>{table}</tbody>\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n","import { setRandomMine } from './createMatrix'\r\nimport {\r\n  forEach,\r\n  openingClearCells,\r\n  getCellById,\r\n  getAroundCells,\r\n} from './helpers'\r\n//import { setRandomMine } from './createMatrix'\r\n\r\nexport let leftHandler = (matrix, id, isPlay, mines) => {\r\n  if (!isPlay) {\r\n    setRandomMine(matrix, mines, id)\r\n  }\r\n  let cell = getCellById(matrix, id)\r\n  cell.envBackLight = false\r\n  if (!cell.isFlag) {\r\n    cell.show = true\r\n    if (cell.isMine) {\r\n      forEach(matrix, (x) => (x.show = true))\r\n    } else if (!cell.mineCounter) {\r\n      openingClearCells(matrix, cell)\r\n    }\r\n  }\r\n  return matrix\r\n}\r\n\r\nexport let rightHandler = (matrix, id) => {\r\n  let cell = getCellById(matrix, id)\r\n  if (!cell.show) {\r\n    cell.isFlag = !cell.isFlag\r\n  }\r\n  return matrix\r\n}\r\n\r\nexport let leaveHandler = (matrix) => {\r\n  forEach(matrix, (x) => (x.envBackLight = false))\r\n  return matrix\r\n}\r\n\r\nexport let bothDown = (matrix, id) => {\r\n  let cell = getCellById(matrix, id)\r\n  if (cell.isFlag || !cell.mineCounter || !cell.show) {\r\n    return matrix\r\n  }\r\n  let envCells = getAroundCells(matrix, cell.y, cell.x)\r\n  envCells\r\n    .filter((x) => !x.show && !x.isFlag)\r\n    .map((x) => (x.envBackLight = true))\r\n  return matrix\r\n}\r\nexport let bothUp = (matrix, id) => {\r\n  let cell = getCellById(matrix, id)\r\n  forEach(matrix, (x) => (x.envBackLight = false))\r\n  let envCells = getAroundCells(matrix, cell.y, cell.x)\r\n  let flags = envCells.filter((x) => x.isFlag).length\r\n  let mines = envCells.filter((x) => x.isMine).length\r\n  if (flags !== mines) {\r\n    return matrix\r\n  } else if (flags === mines && flags + mines !== 0) {\r\n    envCells.map((x) => {\r\n      if (x.isMine && !x.isFlag) {\r\n        forEach(matrix, (x) => (x.show = true))\r\n      } else if (!x.isMine && !x.mineCounter) {\r\n        openingClearCells(matrix, x)\r\n      } else if (!x.isMine) {\r\n        x.show = true\r\n      }\r\n      return matrix\r\n    })\r\n  }\r\n  return matrix\r\n}\r\n\r\nexport const pressLeft = (matrix, id) => {\r\n  let cell = getCellById(matrix, id)\r\n  if (!cell.show || cell.isFlag) cell.envBackLight = true\r\n  return matrix\r\n}\r\n\r\nexport const setButtonClass = (matrix) => {\r\n  let flatMatrix = []\r\n  for (let y = 0; y < matrix.length; y++) {\r\n    for (let x = 0; x < matrix[y].length; x++) {\r\n      if (matrix[y][x].isMine && matrix[y][x].show) {\r\n        return { buttonStatus: 'lose', isPlay: false }\r\n      }\r\n      flatMatrix.push(matrix[y][x])\r\n    }\r\n  }\r\n  if (flatMatrix.every((x) => x.show || x.isFlag)) {\r\n    return { buttonStatus: 'win', isPlay: false }\r\n  }\r\n  return { buttonStatus: 'play', isPlay: true }\r\n}\r\n","import { createMatrix } from '../functions/createMatrix'\r\nimport { updateTimerArr } from '../functions/metrics'\r\nimport {\r\n  leaveHandler,\r\n  leftHandler,\r\n  rightHandler,\r\n  bothDown,\r\n  bothUp,\r\n  pressLeft,\r\n  setButtonClass,\r\n} from '../functions/updateMatrix'\r\n\r\nconst initialState = {\r\n  matrix: [],\r\n  isPlay: false,\r\n  counterArr: [0, 0, 0],\r\n  buttonStatus: 'play',\r\n  size:9,\r\n  mines:10\r\n}\r\n\r\nexport const mainReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'NEWMATRIX':\r\n      return {\r\n        ...state,\r\n        matrix: [...action.matrix],\r\n      }\r\n    case 'bothDown':\r\n      return {\r\n        ...state,\r\n        matrix: [...bothDown(state.matrix, action.id)],\r\n      }\r\n    case 'bothUp':\r\n      return {\r\n        ...state,\r\n        matrix: [...bothUp(state.matrix, action.id)],\r\n        ...setButtonClass(state.matrix),\r\n      }\r\n    case 'pressLeft':\r\n      return {\r\n        ...state,\r\n        matrix: [...pressLeft(state.matrix, action.id)],\r\n      }\r\n    case 'left':\r\n      return {\r\n        ...state,\r\n        matrix: [...leftHandler(state.matrix, action.id, state.isPlay, state.mines)],\r\n        ...setButtonClass(state.matrix),\r\n      }\r\n    case 'right':\r\n      return {\r\n        ...state,\r\n        matrix: [...rightHandler(state.matrix, action.id)],\r\n        ...setButtonClass(state.matrix),\r\n      }\r\n    case 'leave':\r\n      return {\r\n        ...state,\r\n        matrix: [...leaveHandler(state.matrix)],\r\n      }\r\n    case 'tick':\r\n      return {\r\n        ...state,\r\n        counterArr: [...updateTimerArr(state.counterArr)],\r\n      }\r\n    case 'restart':\r\n      return {\r\n        ...initialState,\r\n        matrix: [...createMatrix(state.size, state.size)],\r\n        counterArr: [0, 0, 0],\r\n        size:state.size,\r\n        mines:state.mines\r\n      }\r\n    case 'setLevel':\r\n      return{\r\n        ...initialState, size:action.size, mines:action.mines, matrix:[...createMatrix(action.size, action.size)]\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const setNewMatrix = (matrix) => {\r\n  return { type: 'NEWMATRIX', matrix }\r\n}\r\nexport const setKeyPressInCell = ({ type, id }) => {\r\n  return { type, id }\r\n}\r\nexport const setTick = () => {\r\n  return { type: 'tick' }\r\n}\r\nexport const setRestart = () => {\r\n  return { type: 'restart' }\r\n}\r\nexport const setLevel = ({size, mines}) => {\r\n  return { type: 'setLevel', size, mines }\r\n}\r\n","export const eventInfo = (e) => {\r\n  if (e.nativeEvent.which === 1) pressButtons.left = !pressButtons.left\r\n  if (e.nativeEvent.which === 3) pressButtons.right = !pressButtons.right\r\n}\r\nlet pressButtons = {\r\n  left: false,\r\n  right: false,\r\n}\r\nlet downId = null\r\n\r\nexport const mouseDownHandler = (e, id) => {\r\n  eventInfo(e)\r\n  downId = id\r\n  if (pressButtons.left && pressButtons.right) {\r\n    return { type: 'bothDown', id }\r\n  }else if(pressButtons.left){\r\n    return { type: 'pressLeft', id }\r\n  }\r\n}\r\n\r\nexport const mouseUpHandler = (e, id) => {\r\n  const both =\r\n    pressButtons.left &&\r\n    pressButtons.right &&\r\n    (e.nativeEvent.which === 1 || e.nativeEvent.which === 3)\r\n  const leftMouse = pressButtons.left && e.nativeEvent.which === 1 && !both\r\n  const rightMouse = pressButtons.right && e.nativeEvent.which === 3 && !both\r\n  eventInfo(e)\r\n  if (id !== downId) {\r\n    return { type: 'leave', id: '' }\r\n  }\r\n  if (both) {\r\n    return { type: 'bothUp', id }\r\n  }\r\n\r\n  if (leftMouse) {\r\n    return { type: 'left', id }\r\n  } else if (rightMouse) {\r\n    return { type: 'right', id }\r\n  }\r\n}\r\n\r\nexport const mouseLeaveHandler = (event) => {\r\n  pressButtons.left = false\r\n  pressButtons.right = false\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { createMatrix } from '../functions/createMatrix'\r\nimport { Field } from './Field'\r\nimport {\r\n  setNewMatrix,\r\n  setKeyPressInCell,\r\n  setTick,\r\n  setRestart,\r\n  setLevel,\r\n} from '../store/mainReducer'\r\nimport {\r\n  mouseDownHandler,\r\n  mouseUpHandler,\r\n  mouseLeaveHandler,\r\n} from '../functions/handlers'\r\n\r\nclass FieldContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.splitHandlers = (event, id) => {\r\n      switch (event.type) {\r\n        case 'mousedown':\r\n          let obj = mouseDownHandler(event, id)\r\n          if (obj) this.props.setKeyPressInCell(obj)\r\n          break\r\n        case 'mouseup':\r\n          this.props.setKeyPressInCell(mouseUpHandler(event, id))\r\n          break\r\n        case 'mouseleave':\r\n          mouseLeaveHandler()\r\n          break\r\n        default:\r\n          return\r\n      }\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    let matrix = createMatrix(this.props.size, this.props.size)\r\n    this.props.setNewMatrix(matrix)\r\n  }\r\n\r\n  classes(cell) {\r\n    if (cell.envBackLight) {\r\n      return 'backLight'\r\n    } else if (!cell.show && cell.isFlag) {\r\n      return 'flag'\r\n    } else if (!cell.show) {\r\n      return 'hidden'\r\n    } else if (cell.show) {\r\n      if (cell.isMine) {\r\n        return 'mine'\r\n      } else if (cell.mineCounter) {\r\n        return 'n' + cell.mineCounter\r\n      } else {\r\n        return 'clear'\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Field\r\n        matrix={this.props.matrix}\r\n        classes={this.classes}\r\n        splitHandlers={this.splitHandlers}\r\n        counterArr={this.props.counterArr}\r\n        isPlay={this.props.isPlay}\r\n        setTick={this.props.setTick}\r\n        buttonStatus={this.props.buttonStatus}\r\n        setRestart={this.props.setRestart}\r\n        setLevel={this.props.setLevel}\r\n        mines={this.props.mines}\r\n      />\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  size: state.main.size,\r\n  mines: state.main.mines,\r\n  matrix: state.main.matrix,\r\n  counterArr: state.main.counterArr,\r\n  buttonStatus: state.main.buttonStatus,\r\n  isPlay: state.main.isPlay,\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n  setNewMatrix,\r\n  setKeyPressInCell,\r\n  setTick,\r\n  setRestart,\r\n  setLevel,\r\n})(FieldContainer)\r\n","import {mainReducer} from './mainReducer'\r\nconst { createStore, combineReducers } = require(\"redux\");\r\n\r\nlet reducers = combineReducers({main:mainReducer})\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;\r\n\r\nwindow.store = store;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport FieldContainer from './components/FieldContainer';\nimport store from './store/store'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <div className=\"App\">\n        <FieldContainer/>\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}